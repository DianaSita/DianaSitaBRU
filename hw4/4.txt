1 - '0' + 2 //3
'0' приводится к числу

1 - '-0' + 2 //3
'-0' приводится к числу

1 - '-0-' + 'NaN' // 'NaNNaN'
1 - '-0-' даст NaN, т.к. '-0-' не удастся привести к числу, далее - конкатенация строк

'b' + [NaN + 'ba', 'CC'] - {}; //NaN
часть перед - даст 'bNanba,CC', далее попытка вычесть не числа

[] + (()=>{}); //'()=>{}'
пустой массив + функция = строка

[] + (()=>({})); //'()=>({})'
пустой массив + функция = строка

[] + (()=>({}))();//'[object Object]'
(()=>({}))() - создание переменной object, + [] приводит к строке

[] + (() => new Object(123))()//'123'
(() => new Object(123))() создание object, + [] приводит к строке

{} + (() => new Object(123))()//123
пустой литеральный объект + объект Number

(() => new Object(123))() + {} //'123[object Object]'
создание 2х объектов, затем приведение к строке

({}).valueOf() + 1//'[object Object]1'
пустой объект + число = строка

{} + 2//2

typeof ({}).valueOf() + 2//'function2'
typeof определяет тип valueOf, кот. является функцией, далее - конкатенация

+{}//NaN
попытка привести к числу пустой object

+{}+[]//'NaN'
попытка привести к числу пустой object + конкатенация

+[]//0
приведение к числу пустого массива даёт 0

+[]+{}//'0[object Object]'
0 и конкатенация пустого object

+[10, 1]+{}//'NaN[object Object]'
попытка привести к числу массив из 2х элементов + конкатенация с пустым object

{} + [10]//10
